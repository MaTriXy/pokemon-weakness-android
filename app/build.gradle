buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
        classpath 'io.fabric.tools:gradle:1.21.7'
        classpath 'gradle.plugin.com.nimbledroid:gradle-profiler:1.0.8'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.nimbledroid.profiler'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'android-apt'

def isTravis = "true".equals(System.getenv("TRAVIS"))

def versionMajor = 0
def versionMinor = 5
def versionPatch = 0
def versionRevision = 1

def isSnapshot = false

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    defaultConfig {
        applicationId "com.sloydev.pkweakness"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode versionRevision + versionPatch * 100 + versionMinor * 10000 + versionMajor * 1000000
        versionName "$versionMajor.$versionMinor.$versionPatch"
        versionName isSnapshot ? versionName + "-snapshot$versionRevision" : versionName
        archivesBaseName = "PkWeakness-" + versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storePassword "banana"
            keyAlias "banana"
            keyPassword "banana"
            storeFile file("../signing/fake.jks")
        }
        debug {
            storeFile file('../signing/debug.jks')
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.betaDistributionGroupAliasesFilePath = "beta/distribution_beta.txt"
            ext.betaDistributionNotifications=false
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    lintOptions {
        ignoreWarnings isTravis
        textReport isTravis
        textOutput 'stdout'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def nimbledroidApiKey = hasProperty('pk_nimbledroid_api_key') ? project.pk_nimbledroid_api_key : 'nokey'
nimbledroid {
    apiKey nimbledroidApiKey
}

task upload << {}
upload.dependsOn 'check', 'assembleRelease', 'crashlyticsUploadDistributionRelease', 'ndUpload'

if (hasProperty('pk_weakness_keystore_pass')) {
    android.signingConfigs.release.storePassword = project.pk_weakness_keystore_pass
    android.signingConfigs.release.keyAlias = project.pk_weakness_key_alias
    android.signingConfigs.release.keyPassword = project.pk_weakness_key_pass
    android.signingConfigs.release.storeFile = file("../signing/release.jks")
    println "Signature properties found. Will use the real signature for release build type."
} else {
    println "Signature properties not found: pk_weakness_keystore_pass, pk_weakness_key_alias and pk_weakness_key_pass. Fake signature will be used for release build type."
}

dependencies {
    def supportLibVersion = '23.4.0'
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
    compile "com.android.support:cardview-v7:$supportLibVersion"

    compile 'com.google.android:flexbox:0.2.2'

    compile 'com.jakewharton:butterknife:8.2.1'
    apt 'com.jakewharton:butterknife-compiler:8.2.1'

    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.google.code.gson:gson:2.7'

    compile 'de.cketti.mailto:email-intent-builder:1.0.0'

    compile 'io.reactivex:rxjava:1.1.7'
    compile 'io.reactivex:rxandroid:1.2.1'

    compile 'com.google.firebase:firebase-config:9.2.1'

    compile 'com.jakewharton.timber:timber:4.1.2'

    debugCompile "com.android.support:palette-v7:$supportLibVersion"

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile 'org.assertj:assertj-core:3.5.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true;
    }
}

apply plugin: 'com.google.gms.google-services'
